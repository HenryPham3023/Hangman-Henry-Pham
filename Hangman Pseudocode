BEGIN HangmanGame

    INITIALISE Pygame
    
    TRY
        CREATE Game Window (Width: 1200, Height: 800)
        SET Title: "Hangman Game!"
    CATCH Error
        PRINT "Failed to set up display"
        EXIT Program
    
    DEFINE Constants:
        - RADIUS = 20
        - GAP = 15
        - MAX_ATTEMPTS = 6
        - Colors (WHITE, BLACK, LIGHT_BLUE, RED, GREEN)
    
    DEFINE Fonts (Try loading 'comicsans', else use default)
    
    DEFINE Dictionary WORD_LISTS containing:
        - EASY, NORMAL, HARD, EXTREME difficulty words with hints
    
    CREATE Class `GameState`
        METHOD `__init__()`
            INITIALIZE:
                - `letters` (List of letter buttons)
                - `word` (Current word to guess)
                - `hint` (Hint for the word)
                - `hangman_status` (Mistakes counter)
                - `guessed` (List of guessed letters)
                - `hint_used` (Boolean flag for hint usage)
            CALL `generate_letters()`
        
        METHOD `generate_letters()`
            INITIALIZE `letters` as an empty list
            CALCULATE start position for letters
            LOOP for each letter A-Z:
                - DETERMINE X, Y position
                - ADD [X, Y, Letter, Visible=True] to `letters`
        
        METHOD `reset(difficulty)`
            RESET:
                - `hangman_status = 0`
                - `guessed = []`
                - `hint_used = False`
            CALL `generate_letters()`
            SELECT a random `(word, hint)` from `WORD_LISTS[difficulty]`
    
    FUNCTION `draw_hangman(status)`
        DRAW hangman base structure
        IF status >= 1: DRAW Head
        IF status >= 2: DRAW Body
        IF status >= 3: DRAW Left Arm
        IF status >= 4: DRAW Right Arm
        IF status >= 5: DRAW Left Leg
        IF status >= 6: DRAW Right Leg

    FUNCTION `select_difficulty()`
        DISPLAY "Select Difficulty" Screen
        SHOW Buttons: EASY, NORMAL, HARD, EXTREME
        WAIT for User Input:
            IF Mouse Clicks on a Button:
                RETURN Selected Difficulty
    
    FUNCTION `draw_game(state)`
        CLEAR Screen
        DISPLAY Title "HANGMAN"
        SHOW Current Word (Replacing unguessed letters with "_")
        SHOW Letter Buttons
        SHOW Hangman based on `state.hangman_status`
        SHOW "Attempts Left"
        IF Hint Used:
            DISPLAY Hint Text
        UPDATE Screen

    FUNCTION `show_message(message, duration)`
        CLEAR Screen
        DISPLAY `message`
        WAIT for `duration` milliseconds
    
    FUNCTION `ask_to_play_again()`
        SHOW "Play Again?" Screen
        WAIT for User Input:
            IF "YES" Clicked:
                RETURN True
            IF "NO" Clicked:
                RETURN False
    
    FUNCTION `main_game_loop(state)`
        WHILE True:
            WAIT for Events:
                IF Quit Event:
                    EXIT Program
                
                IF Mouse Clicked:
                    IF Hint Button Clicked:
                        SET `state.hint_used = True`
                    CHECK IF Letter Button Clicked:
                        UPDATE Letter Visibility
                        ADD Letter to `state.guessed`
                        IF Incorrect Guess:
                            INCREMENT `state.hangman_status`
                
                IF Keyboard Key Pressed:
                    CHECK IF Key is a Letter:
                        ADD Letter to `state.guessed`
                        UPDATE Letter Button Visibility
                        IF Incorrect Guess:
                            INCREMENT `state.hangman_status`
            
            CALL `draw_game(state)`
            
            IF All Letters in Word Guessed:
                CALL `show_message("YOU WON!")`
                RETURN
            
            IF `state.hangman_status >= MAX_ATTEMPTS`:
                SHOW "YOU LOST!" Message
                DISPLAY The Correct Word
                WAIT 3 Seconds
                RETURN
    
    FUNCTION `main()`
        CREATE `GameState` object `state`
        
        WHILE True:
            CALL `select_difficulty()`
            CALL `state.reset(difficulty)`
            CALL `main_game_loop(state)`
            
            IF NOT `ask_to_play_again()`:
                EXIT Program

    IF __name__ == "__main__":
        CALL `main()`
    
END HangmanGame
